# Default values for router.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
    repository: wundergraph/cosmo/router
    registry: ghcr.io
    pullPolicy: IfNotPresent
    # -- Overrides the image tag whose default is the chart appVersion.
    version: 'latest'

deploymentStrategy: {}

imagePullSecrets: []

# -- String to partially override common.names.fullname template (will maintain the release name)
nameOverride: ''

# -- String to fully override common.names.fullname template
fullnameOverride: ''

# -- Allows to set additional environment / runtime variables on the container. Useful for global application non-specific settings.
extraEnvVars:
    []
    # Recommended for production to mitigate the risk of OOM kills. Requires Go 1.19+.
    # Keep the value lower than the maximum memory limit you set. E.g. if you have 3GB memory limit, set this to 2750MiB.
#  - name: GOMEMLIMIT
#    value: "2750MiB"

# -- Optionally specify extra list of additional volumes for Router pods
extraVolumes: []

# -- Optionally specify extra list of additional volumeMounts for Router container's
extraVolumeMounts: []

# -- Name of existing ConfigMap containing extra env vars
extraEnvVarsCM: ''

# -- Name of existing Secret containing extra env vars
extraEnvVarsSecret: ''

domainName: &domain_name 'wundergaph-test.com'
domains: [*domain_name]
sslPolicy: gke-ingress-ssl-policy-https

serviceAccount:
    # -- Specifies whether a service account should be created
    create: true
    # -- Annotations to add to the service account
    annotations: {}
    # -- The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ''

serviceAnnotations: {}

podAnnotations: {}

podSecurityContext:
    {}
    # fsGroup: 2000

securityContext:
    {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

service:
    type: ClusterIP
    port: 3002

ingress:
    enabled: true
    # className: ''
    annotations:
        kubernetes.io/ingress.global-static-ip-name: app
        kubernetes.io/ingress.class: gce
        networking.gke.io/v1beta1.FrontendConfig: router-frontend-config
        networking.gke.io/managed-certificates: router-certificates

    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
    hosts:
        - host: *domain_name
          paths:
              - path: /*
                pathType: ImplementationSpecific
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

# -- Sets the [istio gateway](https://istio.io/latest/docs/reference/config/networking/gateway/) load balancer to expose the virtual service
# -- Requires Istio v1.5 or greater
istioGateway:
    # -- enable the istioGateway - often used in conjunction with istioVirtualService to expose services via an istio gateway deployment
    enabled: false
    # -- Selectors for the Gateway deployment
    selector: {}
    # -- Annotations for the Gateway
    annotations: {}
    # -- List of hosts that the gateway can serve
    hosts:
        []
        # -- Hostname the Gateway can serve
        # - host: router.wundergraph.local
        # -- The name of the secret that holds the TLS certs including the CA certificates
        #   credentialName: istio-ingressgateway-certs

# -- Sets the [virtual service](https://istio.io/latest/docs/reference/config/networking/virtual-service/) to route a Gateway to the router
# -- Requires Istio v1.5 or greater
istioVirtualService:
    # -- enable an Istio VirtualService
    enabled: false
    # -- Annotations for the VirtualService
    annotations: {}

resources:
    {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

#initContainers:
#  init-controlplane:
#    image: busybox:1.28
#    imagePullPolicy: "IfNotPresent"
#    command: ['sh', '-c', 'until nslookup {{ include "controlplane.fullname" . }}; do echo waiting for controlplane; sleep 2; done;']

autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

# -- Sets the [pod disruption budget](https://kubernetes.io/docs/tasks/run-application/configure-pdb/) for Deployment pods
podDisruptionBudget: {}

# -- Set to existing PriorityClass name to control pod preemption by the scheduler
priorityClassName: ''

# -- Sets the [termination grace period](https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#hook-handler-execution) for Deployment pods
terminationGracePeriodSeconds: 30

probes:
    # -- Configure readiness probe
    readiness:
        httpGet:
            path: /health/ready
            port: http
        initialDelaySeconds: 5
    # -- Configure liveness probe
    liveness:
        httpGet:
            path: /health/live
            port: http
        initialDelaySeconds: 10

global:
    helmTests: false

#############################
# Application configuration #
#############################

# You have two options to configure the router:
# 1. Use the existingConfigmap to provide the router configuration via a configmap.
# 2. Use the commonConfiguration to provide the router configuration via yaml.
# The configuration section should be used for simple use-cases and to pass sensitive information like the graphApiToken.
# Only in that way, we guarantee that sensitive information are stored as secrets in the cluster.

# -- The name of the configmap to use for the router configuration. The key "config.yaml" is required in the configmap.
# If this is set, the commonConfiguration section is ignored.
existingConfigmap: 'router'

# -- Existing secret in the same namespace containing the graphApiToken. The secret key has to match with current secret.
existingSecret: 'yes'

# Use this section to pass the graphApiToken or to configure simple settings.
# -- You can use this to provide the router configuration via yaml. Values here have precedence over the configurations section.
# For a full list of available configuration options, see https://cosmo-docs.wundergraph.com/router/configuration
# This value is processed with the helm `tpl` function allowing referencing of variables and inclusion of templates
commonConfiguration: |-
    version: "1"
    log_level: "info"

# Use this section to pass the graphApiToken or to configure simple settings.
configuration:
    # -- The router token is used to authenticate the router against the controlplane (required)
    # graphApiToken: 'replace-me'
    # -- The execution config file to statically configure the router. If set, polling of the config is disabled.
    # If your config exceeds 1MB (Kubernetes limit), you have to mount it as a file and set the path in routerConfigPath instead
    executionConfig: |-
        {
            "engineConfig": {
                "defaultFlushInterval": "500",
                "datasourceConfigurations": [
                    {
                        "kind": "GRAPHQL",
                        "rootNodes": [
                            {
                                "typeName": "Query",
                                "fieldNames": [
                                    "employee",
                                    "employeeAsList",
                                    "employees",
                                    "products",
                                    "teammates",
                                    "firstEmployee"
                                ]
                            },
                            {
                                "typeName": "Mutation",
                                "fieldNames": [
                                    "updateEmployeeTag"
                                ]
                            },
                            {
                                "typeName": "Subscription",
                                "fieldNames": [
                                    "currentTime",
                                    "countEmp",
                                    "countEmp2"
                                ]
                            },
                            {
                                "typeName": "Country",
                                "fieldNames": [
                                    "key"
                                ]
                            },
                            {
                                "typeName": "Employee",
                                "fieldNames": [
                                    "details",
                                    "id",
                                    "tag",
                                    "role",
                                    "updatedAt",
                                    "startDate",
                                    "rootFieldThrowsError",
                                    "rootFieldErrorWrapper"
                                ]
                            },
                            {
                                "typeName": "Consultancy",
                                "fieldNames": [
                                    "upc",
                                    "lead"
                                ]
                            },
                            {
                                "typeName": "Cosmo",
                                "fieldNames": [
                                    "upc",
                                    "engineers",
                                    "lead"
                                ]
                            },
                            {
                                "typeName": "SDK",
                                "fieldNames": [
                                    "upc",
                                    "engineers",
                                    "owner"
                                ]
                            }
                        ],
                        "childNodes": [
                            {
                                "typeName": "RoleType",
                                "fieldNames": [
                                    "departments",
                                    "title",
                                    "employees"
                                ]
                            },
                            {
                                "typeName": "Identifiable",
                                "fieldNames": [
                                    "id"
                                ]
                            },
                            {
                                "typeName": "Engineer",
                                "fieldNames": [
                                    "departments",
                                    "title",
                                    "employees",
                                    "engineerType"
                                ]
                            },
                            {
                                "typeName": "Marketer",
                                "fieldNames": [
                                    "departments",
                                    "title",
                                    "employees"
                                ]
                            },
                            {
                                "typeName": "Operator",
                                "fieldNames": [
                                    "departments",
                                    "title",
                                    "employees",
                                    "operatorType"
                                ]
                            },
                            {
                                "typeName": "Details",
                                "fieldNames": [
                                    "forename",
                                    "location",
                                    "surname",
                                    "pastLocations"
                                ]
                            },
                            {
                                "typeName": "City",
                                "fieldNames": [
                                    "type",
                                    "name",
                                    "country"
                                ]
                            },
                            {
                                "typeName": "CountryKey",
                                "fieldNames": [
                                    "name"
                                ]
                            },
                            {
                                "typeName": "ErrorWrapper",
                                "fieldNames": [
                                    "okField",
                                    "errorField"
                                ]
                            },
                            {
                                "typeName": "Time",
                                "fieldNames": [
                                    "unixTime",
                                    "timeStamp"
                                ]
                            },
                            {
                                "typeName": "IProduct",
                                "fieldNames": [
                                    "upc",
                                    "engineers"
                                ]
                            }
                        ],
                        "overrideFieldPathFromAlias": true,
                        "customGraphql": {
                            "fetch": {
                                "url": {
                                    "staticVariableContent": "http://localhost:4001/graphql"
                                },
                                "method": "POST",
                                "body": {},
                                "baseUrl": {},
                                "path": {}
                            },
                            "subscription": {
                                "enabled": true,
                                "url": {
                                    "staticVariableContent": "http://localhost:4001/graphql"
                                },
                                "protocol": "GRAPHQL_SUBSCRIPTION_PROTOCOL_WS",
                                "websocketSubprotocol": "GRAPHQL_WEBSOCKET_SUBPROTOCOL_AUTO"
                            },
                            "federation": {
                                "enabled": true,
                                "serviceSdl": "directive @goField(\n  forceResolver: Boolean\n  name: String\n  omittable: Boolean\n) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION\n\ntype Query {\n  employee(id: Int!): Employee\n  employeeAsList(id: Int!): [Employee]\n  employees: [Employee]\n  products: [Products!]!\n  teammates(team: Department!): [Employee!]!\n  firstEmployee: Employee! @tag(name: \"internal\")\n}\n\ntype Mutation {\n  updateEmployeeTag(id: Int!, tag: String!): Employee\n}\n\ntype Subscription {\n  \"\"\"\n  `currentTime` will return a stream of `Time` objects.\n  \"\"\"\n  currentTime: Time!\n  countEmp(max: Int!, intervalMilliseconds: Int!): Int!\n  countEmp2(max: Int!, intervalMilliseconds: Int!): Int!\n}\n\nenum Department {\n  ENGINEERING\n  MARKETING\n  OPERATIONS\n}\n\ninterface RoleType {\n  departments: [Department!]!\n  title: [String!]!\n  employees: [Employee!]! @goField(forceResolver: true)\n}\n\nenum EngineerType {\n  BACKEND\n  FRONTEND\n  FULLSTACK\n}\n\ninterface Identifiable {\n  id: Int!\n}\n\ntype Engineer implements RoleType {\n  departments: [Department!]!\n  title: [String!]!\n  employees: [Employee!]! @goField(forceResolver: true)\n  engineerType: EngineerType!\n}\n\ntype Marketer implements RoleType {\n  departments: [Department!]!\n  title: [String!]!\n  employees: [Employee!]! @goField(forceResolver: true)\n}\n\nenum OperationType {\n  FINANCE\n  HUMAN_RESOURCES\n}\n\ntype Operator implements RoleType {\n  departments: [Department!]!\n  title: [String!]!\n  employees: [Employee!]! @goField(forceResolver: true)\n  operatorType: [OperationType!]!\n}\n\ntype Details {\n  forename: String! @shareable\n  location: Country!\n  surname: String! @shareable\n  pastLocations: [City!]!\n}\n\ntype City {\n  type: String!\n  name: String!\n  country: Country\n}\n\n# Using a nested key field simply because it can showcase potential bug\n# vectors / Federation capabilities.\ntype Country @key(fields: \"key { name }\", resolvable: false) {\n  key: CountryKey!\n}\n\ntype CountryKey {\n  name: String!\n}\n\ntype Employee implements Identifiable @key(fields: \"id\") {\n  details: Details! @shareable\n  id: Int!\n  tag: String!\n  role: RoleType!\n  notes: String @shareable\n  updatedAt: String!\n  startDate: String! @requiresScopes(scopes: [[\"read:employee\", \"read:private\"], [\"read:all\"]])\n  rootFieldThrowsError: String @goField(forceResolver: true)\n  rootFieldErrorWrapper: ErrorWrapper @goField(forceResolver: true)\n}\n\ntype ErrorWrapper {\n  okField: String\n  errorField: String @goField(forceResolver: true)\n}\n\ntype Time {\n  unixTime: Int!\n  timeStamp: String!\n}\n\nunion Products = Consultancy | Cosmo | SDK\n\ninterface IProduct {\n  upc: ID!\n  engineers: [Employee!]!\n}\n\ntype Consultancy @key(fields: \"upc\") {\n  upc: ID!\n  lead: Employee!\n}\n\ntype Cosmo implements IProduct @key(fields: \"upc\") {\n  upc: ID!\n  engineers: [Employee!]!\n  lead: Employee!\n}\n\ntype SDK implements IProduct @key(fields: \"upc\") {\n  upc: ID!\n  engineers: [Employee!]!\n  owner: Employee!\n}\n"
                            },
                            "upstreamSchema": {
                                "key": "c1e81607a12c9fbe8feb0c348f652935974db548"
                            }
                        },
                        "requestTimeoutSeconds": "10",
                        "id": "0",
                        "keys": [
                            {
                                "typeName": "Country",
                                "selectionSet": "key { name }",
                                "disableEntityResolver": true
                            },
                            {
                                "typeName": "Employee",
                                "selectionSet": "id"
                            },
                            {
                                "typeName": "Consultancy",
                                "selectionSet": "upc"
                            },
                            {
                                "typeName": "Cosmo",
                                "selectionSet": "upc"
                            },
                            {
                                "typeName": "SDK",
                                "selectionSet": "upc"
                            }
                        ]
                    },
                    {
                        "kind": "GRAPHQL",
                        "rootNodes": [
                            {
                                "typeName": "Query",
                                "fieldNames": [
                                    "findEmployees"
                                ]
                            },
                            {
                                "typeName": "Employee",
                                "fieldNames": [
                                    "id",
                                    "details"
                                ]
                            }
                        ],
                        "childNodes": [
                            {
                                "typeName": "Animal",
                                "fieldNames": [
                                    "class",
                                    "gender"
                                ]
                            },
                            {
                                "typeName": "Pet",
                                "fieldNames": [
                                    "class",
                                    "gender",
                                    "name"
                                ]
                            },
                            {
                                "typeName": "Alligator",
                                "fieldNames": [
                                    "class",
                                    "dangerous",
                                    "gender",
                                    "name"
                                ]
                            },
                            {
                                "typeName": "Cat",
                                "fieldNames": [
                                    "class",
                                    "gender",
                                    "name",
                                    "type"
                                ]
                            },
                            {
                                "typeName": "Dog",
                                "fieldNames": [
                                    "breed",
                                    "class",
                                    "gender",
                                    "name"
                                ]
                            },
                            {
                                "typeName": "Mouse",
                                "fieldNames": [
                                    "class",
                                    "gender",
                                    "name"
                                ]
                            },
                            {
                                "typeName": "Pony",
                                "fieldNames": [
                                    "class",
                                    "gender",
                                    "name"
                                ]
                            },
                            {
                                "typeName": "Details",
                                "fieldNames": [
                                    "forename",
                                    "middlename",
                                    "surname",
                                    "hasChildren",
                                    "maritalStatus",
                                    "nationality",
                                    "pets"
                                ]
                            }
                        ],
                        "overrideFieldPathFromAlias": true,
                        "customGraphql": {
                            "fetch": {
                                "url": {
                                    "staticVariableContent": "http://localhost:4002/graphql"
                                },
                                "method": "POST",
                                "body": {},
                                "baseUrl": {},
                                "path": {}
                            },
                            "subscription": {
                                "enabled": true,
                                "url": {
                                    "staticVariableContent": "http://localhost:4002/graphql"
                                },
                                "protocol": "GRAPHQL_SUBSCRIPTION_PROTOCOL_WS",
                                "websocketSubprotocol": "GRAPHQL_WEBSOCKET_SUBPROTOCOL_AUTO"
                            },
                            "federation": {
                                "enabled": true,
                                "serviceSdl": "type Query {\n  findEmployees(criteria: SearchInput): [Employee!]!\n}\n\nenum Class {\n  FISH\n  MAMMAL\n  REPTILE\n}\n\nenum Gender {\n  FEMALE\n  MALE\n  UNKNOWN\n}\n\ninterface Animal {\n  class: Class!\n  gender: Gender!\n}\n\ninterface Pet implements Animal {\n  class: Class!\n  gender: Gender!\n  name: String!\n}\n\nenum CatType {\n  HOME\n  STREET\n}\n\ntype Alligator implements Pet & Animal {\n  class: Class!\n  dangerous: String!\n  gender: Gender!\n  name: String!\n}\n\ntype Cat implements Pet & Animal {\n  class: Class!\n  gender: Gender!\n  name: String!\n  type: CatType!\n}\n\nenum DogBreed {\n  GOLDEN_RETRIEVER\n  POODLE\n  ROTTWEILER\n  YORKSHIRE_TERRIER\n}\n\ntype Dog implements Pet & Animal {\n  breed: DogBreed!\n  class: Class!\n  gender: Gender!\n  name: String!\n}\n\ntype Mouse implements Pet & Animal {\n  class: Class!\n  gender: Gender!\n  name: String!\n}\n\ntype Pony implements Pet & Animal {\n  class: Class!\n  gender: Gender!\n  name: String!\n}\n\nenum MaritalStatus {\n  ENGAGED\n  MARRIED\n}\n\nenum Nationality {\n  AMERICAN\n  DUTCH\n  ENGLISH\n  GERMAN\n  INDIAN\n  SPANISH\n  UKRAINIAN\n}\n\ntype Details {\n  forename: String! @shareable\n  middlename: String @deprecated\n  surname: String! @shareable\n  hasChildren: Boolean!\n  maritalStatus: MaritalStatus\n  nationality: Nationality!\n  pets: [Pet]\n}\n\ntype Employee @key(fields: \"id\") {\n  id: Int!\n  details: Details @shareable\n}\n\ninput SearchInput {\n  hasPets: Boolean\n  nationality: Nationality\n  nested: NestedSearchInput\n}\n\ninput NestedSearchInput {\n  maritalStatus: MaritalStatus\n  hasChildren: Boolean\n}\n"
                            },
                            "upstreamSchema": {
                                "key": "a2004ce79c42883f0c26905f98b3b76f69fcbf1b"
                            }
                        },
                        "requestTimeoutSeconds": "10",
                        "id": "1",
                        "keys": [
                            {
                                "typeName": "Employee",
                                "selectionSet": "id"
                            }
                        ]
                    },
                    {
                        "kind": "GRAPHQL",
                        "rootNodes": [
                            {
                                "typeName": "Country",
                                "fieldNames": [
                                    "key"
                                ]
                            },
                            {
                                "typeName": "Employee",
                                "fieldNames": [
                                    "id",
                                    "hobbies"
                                ]
                            },
                            {
                                "typeName": "SDK",
                                "fieldNames": [
                                    "upc",
                                    "clientLanguages"
                                ]
                            },
                            {
                                "typeName": "Subscription",
                                "fieldNames": [
                                    "countHob"
                                ]
                            }
                        ],
                        "childNodes": [
                            {
                                "typeName": "Exercise",
                                "fieldNames": [
                                    "employees",
                                    "category"
                                ]
                            },
                            {
                                "typeName": "Experience",
                                "fieldNames": [
                                    "yearsOfExperience"
                                ]
                            },
                            {
                                "typeName": "Flying",
                                "fieldNames": [
                                    "employees",
                                    "planeModels",
                                    "yearsOfExperience"
                                ]
                            },
                            {
                                "typeName": "Gaming",
                                "fieldNames": [
                                    "employees",
                                    "genres",
                                    "name",
                                    "yearsOfExperience"
                                ]
                            },
                            {
                                "typeName": "Other",
                                "fieldNames": [
                                    "employees",
                                    "name"
                                ]
                            },
                            {
                                "typeName": "Programming",
                                "fieldNames": [
                                    "employees",
                                    "languages"
                                ]
                            },
                            {
                                "typeName": "CountryKey",
                                "fieldNames": [
                                    "name"
                                ]
                            },
                            {
                                "typeName": "Travelling",
                                "fieldNames": [
                                    "employees",
                                    "countriesLived"
                                ]
                            },
                            {
                                "typeName": "Hobby",
                                "fieldNames": [
                                    "employees"
                                ]
                            }
                        ],
                        "overrideFieldPathFromAlias": true,
                        "customGraphql": {
                            "fetch": {
                                "url": {
                                    "staticVariableContent": "http://localhost:4003/graphql"
                                },
                                "method": "POST",
                                "body": {},
                                "baseUrl": {},
                                "path": {}
                            },
                            "subscription": {
                                "enabled": true,
                                "url": {
                                    "staticVariableContent": "http://localhost:4003/graphql"
                                },
                                "protocol": "GRAPHQL_SUBSCRIPTION_PROTOCOL_WS",
                                "websocketSubprotocol": "GRAPHQL_WEBSOCKET_SUBPROTOCOL_AUTO"
                            },
                            "federation": {
                                "enabled": true,
                                "serviceSdl": "directive @goField(\n  forceResolver: Boolean\n  name: String\n  omittable: Boolean\n) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION\n\nenum ExerciseType {\n  CALISTHENICS\n  HIKING\n  SPORT\n  STRENGTH_TRAINING\n}\n\ntype Exercise implements Hobby {\n  employees: [Employee!]! @goField(forceResolver: true)\n  category: ExerciseType!\n}\n\ninterface Experience {\n  yearsOfExperience: Float!\n}\n\ntype Flying implements Experience & Hobby {\n  employees: [Employee!]! @goField(forceResolver: true)\n  planeModels: [String!]!\n  yearsOfExperience: Float!\n}\n\nenum GameGenre {\n  ADVENTURE\n  BOARD\n  FPS\n  CARD\n  RPG\n  ROGUELITE\n  SIMULATION\n  STRATEGY\n}\n\ntype Gaming implements Experience & Hobby {\n  employees: [Employee!]! @goField(forceResolver: true)\n  genres: [GameGenre!]!\n  name: String!\n  yearsOfExperience: Float!\n}\n\ntype Other implements Hobby {\n  employees: [Employee!]! @goField(forceResolver: true)\n  name: String!\n}\n\nenum ProgrammingLanguage {\n  CSHARP\n  GO\n  RUST\n  TYPESCRIPT\n}\n\ntype Programming implements Hobby {\n  employees: [Employee!]! @goField(forceResolver: true)\n  languages: [ProgrammingLanguage!]!\n}\n\n# Using a nested key field simply because it can showcase potential bug\n# vectors / Federation capabilities.\ntype Country @key(fields: \"key { name }\", resolvable: false) {\n  key: CountryKey!\n}\n\ntype CountryKey {\n  name: String!\n}\n\ntype Travelling implements Hobby {\n  employees: [Employee!]! @goField(forceResolver: true)\n  countriesLived: [Country!]!\n}\n\ninterface Hobby {\n  employees: [Employee!]! @goField(forceResolver: true)\n}\n\ntype Employee @key(fields: \"id\") {\n  id: Int!\n  hobbies: [Hobby!]\n}\n\ntype SDK @key(fields: \"upc\") {\n  upc: ID!\n  clientLanguages: [ProgrammingLanguage!]!\n}\n\ntype Subscription {\n  countHob(max: Int! intervalMilliseconds: Int!): Int!\n}"
                            },
                            "upstreamSchema": {
                                "key": "724c06483343451f5ee86d42c6a9f9cb2610b97d"
                            }
                        },
                        "requestTimeoutSeconds": "10",
                        "id": "2",
                        "keys": [
                            {
                                "typeName": "Country",
                                "selectionSet": "key { name }",
                                "disableEntityResolver": true
                            },
                            {
                                "typeName": "Employee",
                                "selectionSet": "id"
                            },
                            {
                                "typeName": "SDK",
                                "selectionSet": "upc"
                            }
                        ]
                    },
                    {
                        "kind": "GRAPHQL",
                        "rootNodes": [
                            {
                                "typeName": "Query",
                                "fieldNames": [
                                    "productTypes",
                                    "topSecretFederationFacts",
                                    "factTypes"
                                ]
                            },
                            {
                                "typeName": "Mutation",
                                "fieldNames": [
                                    "addFact"
                                ]
                            },
                            {
                                "typeName": "Employee",
                                "fieldNames": [
                                    "id",
                                    "products",
                                    "notes"
                                ]
                            },
                            {
                                "typeName": "Consultancy",
                                "fieldNames": [
                                    "upc",
                                    "name"
                                ]
                            },
                            {
                                "typeName": "Cosmo",
                                "fieldNames": [
                                    "upc",
                                    "name",
                                    "repositoryURL"
                                ]
                            }
                        ],
                        "childNodes": [
                            {
                                "typeName": "TopSecretFact",
                                "fieldNames": [
                                    "description",
                                    "factType"
                                ]
                            },
                            {
                                "typeName": "DirectiveFact",
                                "fieldNames": [
                                    "title",
                                    "description",
                                    "factType"
                                ]
                            },
                            {
                                "typeName": "EntityFact",
                                "fieldNames": [
                                    "title",
                                    "description",
                                    "factType"
                                ]
                            },
                            {
                                "typeName": "MiscellaneousFact",
                                "fieldNames": [
                                    "title",
                                    "description",
                                    "factType"
                                ]
                            },
                            {
                                "typeName": "Documentation",
                                "fieldNames": [
                                    "url",
                                    "urls"
                                ]
                            }
                        ],
                        "overrideFieldPathFromAlias": true,
                        "customGraphql": {
                            "fetch": {
                                "url": {
                                    "staticVariableContent": "http://localhost:4004/graphql"
                                },
                                "method": "POST",
                                "body": {},
                                "baseUrl": {},
                                "path": {}
                            },
                            "subscription": {
                                "enabled": true,
                                "url": {
                                    "staticVariableContent": "http://localhost:4004/graphql"
                                },
                                "protocol": "GRAPHQL_SUBSCRIPTION_PROTOCOL_WS",
                                "websocketSubprotocol": "GRAPHQL_WEBSOCKET_SUBPROTOCOL_AUTO"
                            },
                            "federation": {
                                "enabled": true,
                                "serviceSdl": "schema {\n  query: Queries\n  mutation: Mutation\n}\n\ntype Queries {\n  productTypes: [Products!]!\n  topSecretFederationFacts: [TopSecretFact!]! @requiresScopes(scopes: [[\"read:fact\"], [\"read:all\"]])\n  factTypes: [TopSecretFactType!]\n}\n\ntype Mutation {\n  addFact(fact: TopSecretFactInput!): TopSecretFact! @requiresScopes(scopes: [[\"write:fact\"], [\"write:all\"]])\n}\n\ninput TopSecretFactInput {\n  title: String!\n  description: FactContent!\n  factType: TopSecretFactType!\n}\n\nenum TopSecretFactType @authenticated {\n  DIRECTIVE,\n  ENTITY,\n  MISCELLANEOUS,\n}\n\ninterface TopSecretFact @authenticated {\n  description: FactContent!\n  factType: TopSecretFactType\n}\n\nscalar FactContent @requiresScopes(scopes: [[\"read:scalar\"], [\"read:all\"]])\n\ntype DirectiveFact implements TopSecretFact @authenticated {\n  title: String!\n  description: FactContent!\n  factType: TopSecretFactType\n}\n\ntype EntityFact implements TopSecretFact @requiresScopes(scopes: [[\"read:entity\"]]){\n  title: String!\n  description: FactContent!\n  factType: TopSecretFactType\n}\n\ntype MiscellaneousFact implements TopSecretFact {\n  title: String!\n  description: FactContent! @requiresScopes(scopes: [[\"read:miscellaneous\"]])\n  factType: TopSecretFactType\n}\n\nenum ProductName {\n  CONSULTANCY\n  COSMO\n  ENGINE\n  FINANCE\n  HUMAN_RESOURCES\n  MARKETING\n  SDK\n}\n\ntype Employee @key(fields: \"id\") {\n  id: Int!\n  products: [ProductName!]!\n  notes: String @override(from: \"employees\")\n}\n\nunion Products = Consultancy | Cosmo | Documentation\n\ntype Consultancy @key(fields: \"upc\") {\n  upc: ID!\n  name: ProductName!\n}\n\ntype Cosmo @key(fields: \"upc\") {\n  upc: ID!\n  name: ProductName!\n  repositoryURL: String!\n}\n\ntype Documentation {\n  url(product: ProductName!): String!\n  urls(products: [ProductName!]!): [String!]!\n}\n"
                            },
                            "upstreamSchema": {
                                "key": "3137f2ca7ef4abe0c88c07c16256197ecb9f5673"
                            }
                        },
                        "requestTimeoutSeconds": "10",
                        "id": "3",
                        "keys": [
                            {
                                "typeName": "Employee",
                                "selectionSet": "id"
                            },
                            {
                                "typeName": "Consultancy",
                                "selectionSet": "upc"
                            },
                            {
                                "typeName": "Cosmo",
                                "selectionSet": "upc"
                            }
                        ]
                    },
                    {
                        "kind": "GRAPHQL",
                        "rootNodes": [
                            {
                                "typeName": "Mutation",
                                "fieldNames": [
                                    "updateAvailability"
                                ]
                            },
                            {
                                "typeName": "Employee",
                                "fieldNames": [
                                    "id",
                                    "isAvailable"
                                ]
                            }
                        ],
                        "overrideFieldPathFromAlias": true,
                        "customGraphql": {
                            "fetch": {
                                "url": {
                                    "staticVariableContent": "http://localhost:4007/graphql"
                                },
                                "method": "POST",
                                "body": {},
                                "baseUrl": {},
                                "path": {}
                            },
                            "subscription": {
                                "enabled": true,
                                "url": {
                                    "staticVariableContent": "http://localhost:4007/graphql"
                                },
                                "protocol": "GRAPHQL_SUBSCRIPTION_PROTOCOL_WS",
                                "websocketSubprotocol": "GRAPHQL_WEBSOCKET_SUBPROTOCOL_AUTO"
                            },
                            "federation": {
                                "enabled": true,
                                "serviceSdl": "type Mutation {\n    updateAvailability(employeeID: Int!, isAvailable: Boolean!): Employee!\n}\ntype Employee @key(fields: \"id\") {\n  id: Int!\n  isAvailable: Boolean!\n}\n"
                            },
                            "upstreamSchema": {
                                "key": "5fdda1c3fd39161632a5e8d70ac8aa781de47039"
                            }
                        },
                        "requestTimeoutSeconds": "10",
                        "id": "4",
                        "keys": [
                            {
                                "typeName": "Employee",
                                "selectionSet": "id"
                            }
                        ]
                    },
                    {
                        "kind": "GRAPHQL",
                        "rootNodes": [
                            {
                                "typeName": "Mutation",
                                "fieldNames": [
                                    "updateMood"
                                ]
                            },
                            {
                                "typeName": "Employee",
                                "fieldNames": [
                                    "id",
                                    "currentMood"
                                ]
                            }
                        ],
                        "overrideFieldPathFromAlias": true,
                        "customGraphql": {
                            "fetch": {
                                "url": {
                                    "staticVariableContent": "http://localhost:4008/graphql"
                                },
                                "method": "POST",
                                "body": {},
                                "baseUrl": {},
                                "path": {}
                            },
                            "subscription": {
                                "enabled": true,
                                "url": {
                                    "staticVariableContent": "http://localhost:4008/graphql"
                                },
                                "protocol": "GRAPHQL_SUBSCRIPTION_PROTOCOL_WS",
                                "websocketSubprotocol": "GRAPHQL_WEBSOCKET_SUBPROTOCOL_AUTO"
                            },
                            "federation": {
                                "enabled": true,
                                "serviceSdl": "type Mutation {\n    updateMood(employeeID: Int!, mood: Mood!): Employee!\n}\nenum Mood {\n    HAPPY\n    SAD\n}\ntype Employee @key(fields: \"id\") {\n  id: Int!\n  currentMood: Mood!\n}\n"
                            },
                            "upstreamSchema": {
                                "key": "02fab2519999b8e3d4671871fd2ab01b6bc321b7"
                            }
                        },
                        "requestTimeoutSeconds": "10",
                        "id": "5",
                        "keys": [
                            {
                                "typeName": "Employee",
                                "selectionSet": "id"
                            }
                        ]
                    }
                ],
                "fieldConfigurations": [
                    {
                        "typeName": "Query",
                        "fieldName": "employee",
                        "argumentsConfiguration": [
                            {
                                "name": "id",
                                "sourceType": "FIELD_ARGUMENT"
                            }
                        ]
                    },
                    {
                        "typeName": "Query",
                        "fieldName": "employeeAsList",
                        "argumentsConfiguration": [
                            {
                                "name": "id",
                                "sourceType": "FIELD_ARGUMENT"
                            }
                        ]
                    },
                    {
                        "typeName": "Query",
                        "fieldName": "teammates",
                        "argumentsConfiguration": [
                            {
                                "name": "team",
                                "sourceType": "FIELD_ARGUMENT"
                            }
                        ]
                    },
                    {
                        "typeName": "Query",
                        "fieldName": "findEmployees",
                        "argumentsConfiguration": [
                            {
                                "name": "criteria",
                                "sourceType": "FIELD_ARGUMENT"
                            }
                        ]
                    },
                    {
                        "typeName": "Mutation",
                        "fieldName": "updateEmployeeTag",
                        "argumentsConfiguration": [
                            {
                                "name": "id",
                                "sourceType": "FIELD_ARGUMENT"
                            },
                            {
                                "name": "tag",
                                "sourceType": "FIELD_ARGUMENT"
                            }
                        ]
                    },
                    {
                        "typeName": "Mutation",
                        "fieldName": "addFact",
                        "argumentsConfiguration": [
                            {
                                "name": "fact",
                                "sourceType": "FIELD_ARGUMENT"
                            }
                        ],
                        "authorizationConfiguration": {
                            "requiresAuthentication": true,
                            "requiredOrScopes": [
                                {
                                    "requiredAndScopes": [
                                        "write:fact"
                                    ]
                                },
                                {
                                    "requiredAndScopes": [
                                        "write:all"
                                    ]
                                }
                            ]
                        }
                    },
                    {
                        "typeName": "Mutation",
                        "fieldName": "updateAvailability",
                        "argumentsConfiguration": [
                            {
                                "name": "employeeID",
                                "sourceType": "FIELD_ARGUMENT"
                            },
                            {
                                "name": "isAvailable",
                                "sourceType": "FIELD_ARGUMENT"
                            }
                        ]
                    },
                    {
                        "typeName": "Mutation",
                        "fieldName": "updateMood",
                        "argumentsConfiguration": [
                            {
                                "name": "employeeID",
                                "sourceType": "FIELD_ARGUMENT"
                            },
                            {
                                "name": "mood",
                                "sourceType": "FIELD_ARGUMENT"
                            }
                        ]
                    },
                    {
                        "typeName": "Subscription",
                        "fieldName": "countEmp",
                        "argumentsConfiguration": [
                            {
                                "name": "max",
                                "sourceType": "FIELD_ARGUMENT"
                            },
                            {
                                "name": "intervalMilliseconds",
                                "sourceType": "FIELD_ARGUMENT"
                            }
                        ]
                    },
                    {
                        "typeName": "Subscription",
                        "fieldName": "countEmp2",
                        "argumentsConfiguration": [
                            {
                                "name": "max",
                                "sourceType": "FIELD_ARGUMENT"
                            },
                            {
                                "name": "intervalMilliseconds",
                                "sourceType": "FIELD_ARGUMENT"
                            }
                        ]
                    },
                    {
                        "typeName": "Subscription",
                        "fieldName": "countHob",
                        "argumentsConfiguration": [
                            {
                                "name": "max",
                                "sourceType": "FIELD_ARGUMENT"
                            },
                            {
                                "name": "intervalMilliseconds",
                                "sourceType": "FIELD_ARGUMENT"
                            }
                        ]
                    },
                    {
                        "typeName": "Documentation",
                        "fieldName": "url",
                        "argumentsConfiguration": [
                            {
                                "name": "product",
                                "sourceType": "FIELD_ARGUMENT"
                            }
                        ]
                    },
                    {
                        "typeName": "Documentation",
                        "fieldName": "urls",
                        "argumentsConfiguration": [
                            {
                                "name": "products",
                                "sourceType": "FIELD_ARGUMENT"
                            }
                        ]
                    },
                    {
                        "typeName": "Employee",
                        "fieldName": "startDate",
                        "authorizationConfiguration": {
                            "requiresAuthentication": true,
                            "requiredOrScopes": [
                                {
                                    "requiredAndScopes": [
                                        "read:employee",
                                        "read:private"
                                    ]
                                },
                                {
                                    "requiredAndScopes": [
                                        "read:all"
                                    ]
                                }
                            ]
                        }
                    },
                    {
                        "typeName": "Query",
                        "fieldName": "topSecretFederationFacts",
                        "authorizationConfiguration": {
                            "requiresAuthentication": true,
                            "requiredOrScopes": [
                                {
                                    "requiredAndScopes": [
                                        "read:fact"
                                    ]
                                },
                                {
                                    "requiredAndScopes": [
                                        "read:all"
                                    ]
                                }
                            ]
                        }
                    },
                    {
                        "typeName": "Query",
                        "fieldName": "factTypes",
                        "authorizationConfiguration": {
                            "requiresAuthentication": true
                        }
                    },
                    {
                        "typeName": "MiscellaneousFact",
                        "fieldName": "description",
                        "authorizationConfiguration": {
                            "requiresAuthentication": true,
                            "requiredOrScopes": [
                                {
                                    "requiredAndScopes": [
                                        "read:miscellaneous",
                                        "read:scalar"
                                    ]
                                },
                                {
                                    "requiredAndScopes": [
                                        "read:miscellaneous",
                                        "read:all"
                                    ]
                                }
                            ]
                        }
                    },
                    {
                        "typeName": "MiscellaneousFact",
                        "fieldName": "factType",
                        "authorizationConfiguration": {
                            "requiresAuthentication": true
                        }
                    },
                    {
                        "typeName": "TopSecretFact",
                        "fieldName": "description",
                        "authorizationConfiguration": {
                            "requiresAuthentication": true,
                            "requiredOrScopes": [
                                {
                                    "requiredAndScopes": [
                                        "read:scalar"
                                    ]
                                },
                                {
                                    "requiredAndScopes": [
                                        "read:all"
                                    ]
                                }
                            ]
                        }
                    },
                    {
                        "typeName": "TopSecretFact",
                        "fieldName": "factType",
                        "authorizationConfiguration": {
                            "requiresAuthentication": true
                        }
                    },
                    {
                        "typeName": "DirectiveFact",
                        "fieldName": "title",
                        "authorizationConfiguration": {
                            "requiresAuthentication": true
                        }
                    },
                    {
                        "typeName": "DirectiveFact",
                        "fieldName": "description",
                        "authorizationConfiguration": {
                            "requiresAuthentication": true,
                            "requiredOrScopes": [
                                {
                                    "requiredAndScopes": [
                                        "read:scalar"
                                    ]
                                },
                                {
                                    "requiredAndScopes": [
                                        "read:all"
                                    ]
                                }
                            ]
                        }
                    },
                    {
                        "typeName": "DirectiveFact",
                        "fieldName": "factType",
                        "authorizationConfiguration": {
                            "requiresAuthentication": true
                        }
                    },
                    {
                        "typeName": "EntityFact",
                        "fieldName": "title",
                        "authorizationConfiguration": {
                            "requiresAuthentication": true,
                            "requiredOrScopes": [
                                {
                                    "requiredAndScopes": [
                                        "read:entity"
                                    ]
                                }
                            ]
                        }
                    },
                    {
                        "typeName": "EntityFact",
                        "fieldName": "description",
                        "authorizationConfiguration": {
                            "requiresAuthentication": true,
                            "requiredOrScopes": [
                                {
                                    "requiredAndScopes": [
                                        "read:entity",
                                        "read:scalar"
                                    ]
                                },
                                {
                                    "requiredAndScopes": [
                                        "read:entity",
                                        "read:all"
                                    ]
                                }
                            ]
                        }
                    },
                    {
                        "typeName": "EntityFact",
                        "fieldName": "factType",
                        "authorizationConfiguration": {
                            "requiresAuthentication": true,
                            "requiredOrScopes": [
                                {
                                    "requiredAndScopes": [
                                        "read:entity"
                                    ]
                                }
                            ]
                        }
                    }
                ],
                "graphqlSchema": "directive @authenticated on ENUM | FIELD_DEFINITION | INTERFACE | OBJECT | SCALAR\n\ndirective @inaccessible on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ndirective @requiresScopes(scopes: [[openfed__Scope!]!]!) on ENUM | FIELD_DEFINITION | INTERFACE | OBJECT | SCALAR\n\ndirective @tag(name: String!) repeatable on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\nscalar openfed__Scope\n\ntype Query {\n  employee(id: Int!): Employee\n  employeeAsList(id: Int!): [Employee]\n  employees: [Employee]\n  products: [Products!]!\n  teammates(team: Department!): [Employee!]!\n  firstEmployee: Employee!\n  findEmployees(criteria: SearchInput): [Employee!]!\n  productTypes: [Products!]!\n  topSecretFederationFacts: [TopSecretFact!]!\n  factTypes: [TopSecretFactType!]\n}\n\ntype Mutation {\n  updateEmployeeTag(id: Int!, tag: String!): Employee\n  addFact(fact: TopSecretFactInput!): TopSecretFact!\n  updateAvailability(employeeID: Int!, isAvailable: Boolean!): Employee!\n  updateMood(employeeID: Int!, mood: Mood!): Employee!\n}\n\ntype Subscription {\n  \"\"\"`currentTime` will return a stream of `Time` objects.\"\"\"\n  currentTime: Time!\n  countEmp(max: Int!, intervalMilliseconds: Int!): Int!\n  countEmp2(max: Int!, intervalMilliseconds: Int!): Int!\n  countHob(max: Int!, intervalMilliseconds: Int!): Int!\n}\n\nenum Department {\n  ENGINEERING\n  MARKETING\n  OPERATIONS\n}\n\ninterface RoleType {\n  departments: [Department!]!\n  title: [String!]!\n  employees: [Employee!]!\n}\n\nenum EngineerType {\n  BACKEND\n  FRONTEND\n  FULLSTACK\n}\n\ninterface Identifiable {\n  id: Int!\n}\n\nenum OperationType {\n  FINANCE\n  HUMAN_RESOURCES\n}\n\ntype Details {\n  forename: String!\n  location: Country!\n  surname: String!\n  pastLocations: [City!]!\n  middlename: String @deprecated\n  hasChildren: Boolean!\n  maritalStatus: MaritalStatus\n  nationality: Nationality!\n  pets: [Pet]\n}\n\ntype City {\n  type: String!\n  name: String!\n  country: Country\n}\n\ntype Country {\n  key: CountryKey!\n}\n\ntype CountryKey {\n  name: String!\n}\n\ntype ErrorWrapper {\n  okField: String\n  errorField: String\n}\n\ntype Time {\n  unixTime: Int!\n  timeStamp: String!\n}\n\nunion Products = Consultancy | Cosmo | SDK | Documentation\n\ninterface IProduct {\n  upc: ID!\n  engineers: [Employee!]!\n}\n\ntype Consultancy {\n  upc: ID!\n  lead: Employee!\n  name: ProductName!\n}\n\nenum Class {\n  FISH\n  MAMMAL\n  REPTILE\n}\n\nenum Gender {\n  FEMALE\n  MALE\n  UNKNOWN\n}\n\ninterface Animal {\n  class: Class!\n  gender: Gender!\n}\n\nenum CatType {\n  HOME\n  STREET\n}\n\nenum DogBreed {\n  GOLDEN_RETRIEVER\n  POODLE\n  ROTTWEILER\n  YORKSHIRE_TERRIER\n}\n\nenum MaritalStatus {\n  ENGAGED\n  MARRIED\n}\n\nenum Nationality {\n  AMERICAN\n  DUTCH\n  ENGLISH\n  GERMAN\n  INDIAN\n  SPANISH\n  UKRAINIAN\n}\n\ninput SearchInput {\n  hasPets: Boolean\n  nationality: Nationality\n  nested: NestedSearchInput\n}\n\ninput NestedSearchInput {\n  maritalStatus: MaritalStatus\n  hasChildren: Boolean\n}\n\nenum ExerciseType {\n  CALISTHENICS\n  HIKING\n  SPORT\n  STRENGTH_TRAINING\n}\n\ninterface Experience {\n  yearsOfExperience: Float!\n}\n\nenum GameGenre {\n  ADVENTURE\n  BOARD\n  FPS\n  CARD\n  RPG\n  ROGUELITE\n  SIMULATION\n  STRATEGY\n}\n\nenum ProgrammingLanguage {\n  CSHARP\n  GO\n  RUST\n  TYPESCRIPT\n}\n\ninterface Hobby {\n  employees: [Employee!]!\n}\n\ninput TopSecretFactInput {\n  title: String!\n  description: FactContent!\n  factType: TopSecretFactType!\n}\n\nenum TopSecretFactType {\n  DIRECTIVE\n  ENTITY\n  MISCELLANEOUS\n}\n\ninterface TopSecretFact {\n  description: FactContent!\n  factType: TopSecretFactType\n}\n\nscalar FactContent\n\nenum ProductName {\n  CONSULTANCY\n  COSMO\n  ENGINE\n  FINANCE\n  HUMAN_RESOURCES\n  MARKETING\n  SDK\n}\n\ntype Documentation {\n  url(product: ProductName!): String!\n  urls(products: [ProductName!]!): [String!]!\n}\n\nenum Mood {\n  HAPPY\n  SAD\n}\n\ntype Engineer implements RoleType {\n  departments: [Department!]!\n  title: [String!]!\n  employees: [Employee!]!\n  engineerType: EngineerType!\n}\n\ntype Marketer implements RoleType {\n  departments: [Department!]!\n  title: [String!]!\n  employees: [Employee!]!\n}\n\ntype Operator implements RoleType {\n  departments: [Department!]!\n  title: [String!]!\n  employees: [Employee!]!\n  operatorType: [OperationType!]!\n}\n\ntype Employee implements Identifiable {\n  details: Details\n  id: Int!\n  tag: String!\n  role: RoleType!\n  notes: String\n  updatedAt: String!\n  startDate: String!\n  rootFieldThrowsError: String\n  rootFieldErrorWrapper: ErrorWrapper\n  hobbies: [Hobby!]\n  products: [ProductName!]!\n  isAvailable: Boolean!\n  currentMood: Mood!\n}\n\ntype Cosmo implements IProduct {\n  upc: ID!\n  engineers: [Employee!]!\n  lead: Employee!\n  name: ProductName!\n  repositoryURL: String!\n}\n\ntype SDK implements IProduct {\n  upc: ID!\n  engineers: [Employee!]!\n  owner: Employee!\n  clientLanguages: [ProgrammingLanguage!]!\n}\n\ninterface Pet implements Animal {\n  class: Class!\n  gender: Gender!\n  name: String!\n}\n\ntype Alligator implements Pet & Animal {\n  class: Class!\n  dangerous: String!\n  gender: Gender!\n  name: String!\n}\n\ntype Cat implements Pet & Animal {\n  class: Class!\n  gender: Gender!\n  name: String!\n  type: CatType!\n}\n\ntype Dog implements Pet & Animal {\n  breed: DogBreed!\n  class: Class!\n  gender: Gender!\n  name: String!\n}\n\ntype Mouse implements Pet & Animal {\n  class: Class!\n  gender: Gender!\n  name: String!\n}\n\ntype Pony implements Pet & Animal {\n  class: Class!\n  gender: Gender!\n  name: String!\n}\n\ntype Exercise implements Hobby {\n  employees: [Employee!]!\n  category: ExerciseType!\n}\n\ntype Flying implements Experience & Hobby {\n  employees: [Employee!]!\n  planeModels: [String!]!\n  yearsOfExperience: Float!\n}\n\ntype Gaming implements Experience & Hobby {\n  employees: [Employee!]!\n  genres: [GameGenre!]!\n  name: String!\n  yearsOfExperience: Float!\n}\n\ntype Other implements Hobby {\n  employees: [Employee!]!\n  name: String!\n}\n\ntype Programming implements Hobby {\n  employees: [Employee!]!\n  languages: [ProgrammingLanguage!]!\n}\n\ntype Travelling implements Hobby {\n  employees: [Employee!]!\n  countriesLived: [Country!]!\n}\n\ntype DirectiveFact implements TopSecretFact {\n  title: String!\n  description: FactContent!\n  factType: TopSecretFactType\n}\n\ntype EntityFact implements TopSecretFact {\n  title: String!\n  description: FactContent!\n  factType: TopSecretFactType\n}\n\ntype MiscellaneousFact implements TopSecretFact {\n  title: String!\n  description: FactContent!\n  factType: TopSecretFactType\n}",
                "stringStorage": {
                    "c1e81607a12c9fbe8feb0c348f652935974db548": "schema {\n  query: Query\n  mutation: Mutation\n  subscription: Subscription\n}\n\ndirective @authenticated on ENUM | FIELD_DEFINITION | INTERFACE | OBJECT | SCALAR\n\ndirective @composeDirective(name: String!) repeatable on SCHEMA\n\ndirective @extends on INTERFACE | OBJECT\n\ndirective @external on FIELD_DEFINITION | OBJECT\n\ndirective @goField(forceResolver: Boolean, name: String, omittable: Boolean) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION\n\ndirective @inaccessible on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ndirective @interfaceObject on OBJECT\n\ndirective @key(fields: openfed__FieldSet!, resolvable: Boolean = true) repeatable on INTERFACE | OBJECT\n\ndirective @link(as: String, for: String, import: [String], url: String!) repeatable on SCHEMA\n\ndirective @override(from: String!) on FIELD_DEFINITION\n\ndirective @provides(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @requires(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @requiresScopes(scopes: [[openfed__Scope!]!]!) on ENUM | FIELD_DEFINITION | INTERFACE | OBJECT | SCALAR\n\ndirective @shareable on FIELD_DEFINITION | OBJECT\n\ndirective @tag(name: String!) repeatable on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ntype City {\n  country: Country\n  name: String!\n  type: String!\n}\n\ntype Consultancy @key(fields: \"upc\") {\n  lead: Employee!\n  upc: ID!\n}\n\ntype Cosmo implements IProduct @key(fields: \"upc\") {\n  engineers: [Employee!]!\n  lead: Employee!\n  upc: ID!\n}\n\ntype Country @key(fields: \"key { name }\", resolvable: false) {\n  key: CountryKey!\n}\n\ntype CountryKey {\n  name: String!\n}\n\nenum Department {\n  ENGINEERING\n  MARKETING\n  OPERATIONS\n}\n\ntype Details {\n  forename: String! @shareable\n  location: Country!\n  pastLocations: [City!]!\n  surname: String! @shareable\n}\n\ntype Employee implements Identifiable @key(fields: \"id\") {\n  details: Details! @shareable\n  id: Int!\n  notes: String @shareable\n  role: RoleType!\n  rootFieldErrorWrapper: ErrorWrapper @goField(forceResolver: true)\n  rootFieldThrowsError: String @goField(forceResolver: true)\n  startDate: String! @requiresScopes(scopes: [[\"read:employee\", \"read:private\"], [\"read:all\"]])\n  tag: String!\n  updatedAt: String!\n}\n\ntype Engineer implements RoleType {\n  departments: [Department!]!\n  employees: [Employee!]! @goField(forceResolver: true)\n  engineerType: EngineerType!\n  title: [String!]!\n}\n\nenum EngineerType {\n  BACKEND\n  FRONTEND\n  FULLSTACK\n}\n\ntype ErrorWrapper {\n  errorField: String @goField(forceResolver: true)\n  okField: String\n}\n\ninterface IProduct {\n  engineers: [Employee!]!\n  upc: ID!\n}\n\ninterface Identifiable {\n  id: Int!\n}\n\ntype Marketer implements RoleType {\n  departments: [Department!]!\n  employees: [Employee!]! @goField(forceResolver: true)\n  title: [String!]!\n}\n\ntype Mutation {\n  updateEmployeeTag(id: Int!, tag: String!): Employee\n}\n\nenum OperationType {\n  FINANCE\n  HUMAN_RESOURCES\n}\n\ntype Operator implements RoleType {\n  departments: [Department!]!\n  employees: [Employee!]! @goField(forceResolver: true)\n  operatorType: [OperationType!]!\n  title: [String!]!\n}\n\nunion Products = Consultancy | Cosmo | SDK\n\ntype Query {\n  employee(id: Int!): Employee\n  employeeAsList(id: Int!): [Employee]\n  employees: [Employee]\n  firstEmployee: Employee! @tag(name: \"internal\")\n  products: [Products!]!\n  teammates(team: Department!): [Employee!]!\n}\n\ninterface RoleType {\n  departments: [Department!]!\n  employees: [Employee!]! @goField(forceResolver: true)\n  title: [String!]!\n}\n\ntype SDK implements IProduct @key(fields: \"upc\") {\n  engineers: [Employee!]!\n  owner: Employee!\n  upc: ID!\n}\n\ntype Subscription {\n  countEmp(intervalMilliseconds: Int!, max: Int!): Int!\n  countEmp2(intervalMilliseconds: Int!, max: Int!): Int!\n  \"\"\"`currentTime` will return a stream of `Time` objects.\"\"\"\n  currentTime: Time!\n}\n\ntype Time {\n  timeStamp: String!\n  unixTime: Int!\n}\n\nscalar openfed__FieldSet\n\nscalar openfed__Scope",
                    "a2004ce79c42883f0c26905f98b3b76f69fcbf1b": "schema {\n  query: Query\n}\n\ndirective @authenticated on ENUM | FIELD_DEFINITION | INTERFACE | OBJECT | SCALAR\n\ndirective @composeDirective(name: String!) repeatable on SCHEMA\n\ndirective @extends on INTERFACE | OBJECT\n\ndirective @external on FIELD_DEFINITION | OBJECT\n\ndirective @inaccessible on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ndirective @interfaceObject on OBJECT\n\ndirective @key(fields: openfed__FieldSet!, resolvable: Boolean = true) repeatable on INTERFACE | OBJECT\n\ndirective @link(as: String, for: String, import: [String], url: String!) repeatable on SCHEMA\n\ndirective @override(from: String!) on FIELD_DEFINITION\n\ndirective @provides(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @requires(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @requiresScopes(scopes: [[openfed__Scope!]!]!) on ENUM | FIELD_DEFINITION | INTERFACE | OBJECT | SCALAR\n\ndirective @shareable on FIELD_DEFINITION | OBJECT\n\ndirective @tag(name: String!) repeatable on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ntype Alligator implements Animal & Pet {\n  class: Class!\n  dangerous: String!\n  gender: Gender!\n  name: String!\n}\n\ninterface Animal {\n  class: Class!\n  gender: Gender!\n}\n\ntype Cat implements Animal & Pet {\n  class: Class!\n  gender: Gender!\n  name: String!\n  type: CatType!\n}\n\nenum CatType {\n  HOME\n  STREET\n}\n\nenum Class {\n  FISH\n  MAMMAL\n  REPTILE\n}\n\ntype Details {\n  forename: String! @shareable\n  hasChildren: Boolean!\n  maritalStatus: MaritalStatus\n  middlename: String @deprecated\n  nationality: Nationality!\n  pets: [Pet]\n  surname: String! @shareable\n}\n\ntype Dog implements Animal & Pet {\n  breed: DogBreed!\n  class: Class!\n  gender: Gender!\n  name: String!\n}\n\nenum DogBreed {\n  GOLDEN_RETRIEVER\n  POODLE\n  ROTTWEILER\n  YORKSHIRE_TERRIER\n}\n\ntype Employee @key(fields: \"id\") {\n  details: Details @shareable\n  id: Int!\n}\n\nenum Gender {\n  FEMALE\n  MALE\n  UNKNOWN\n}\n\nenum MaritalStatus {\n  ENGAGED\n  MARRIED\n}\n\ntype Mouse implements Animal & Pet {\n  class: Class!\n  gender: Gender!\n  name: String!\n}\n\nenum Nationality {\n  AMERICAN\n  DUTCH\n  ENGLISH\n  GERMAN\n  INDIAN\n  SPANISH\n  UKRAINIAN\n}\n\ninput NestedSearchInput {\n  hasChildren: Boolean\n  maritalStatus: MaritalStatus\n}\n\ninterface Pet implements Animal {\n  class: Class!\n  gender: Gender!\n  name: String!\n}\n\ntype Pony implements Animal & Pet {\n  class: Class!\n  gender: Gender!\n  name: String!\n}\n\ntype Query {\n  findEmployees(criteria: SearchInput): [Employee!]!\n}\n\ninput SearchInput {\n  hasPets: Boolean\n  nationality: Nationality\n  nested: NestedSearchInput\n}\n\nscalar openfed__FieldSet\n\nscalar openfed__Scope",
                    "724c06483343451f5ee86d42c6a9f9cb2610b97d": "schema {\n  subscription: Subscription\n}\n\ndirective @extends on INTERFACE | OBJECT\n\ndirective @external on FIELD_DEFINITION | OBJECT\n\ndirective @goField(forceResolver: Boolean, name: String, omittable: Boolean) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION\n\ndirective @key(fields: openfed__FieldSet!, resolvable: Boolean = true) repeatable on INTERFACE | OBJECT\n\ndirective @provides(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @requires(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @tag(name: String!) repeatable on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ntype Country @key(fields: \"key { name }\", resolvable: false) {\n  key: CountryKey!\n}\n\ntype CountryKey {\n  name: String!\n}\n\ntype Employee @key(fields: \"id\") {\n  hobbies: [Hobby!]\n  id: Int!\n}\n\ntype Exercise implements Hobby {\n  category: ExerciseType!\n  employees: [Employee!]! @goField(forceResolver: true)\n}\n\nenum ExerciseType {\n  CALISTHENICS\n  HIKING\n  SPORT\n  STRENGTH_TRAINING\n}\n\ninterface Experience {\n  yearsOfExperience: Float!\n}\n\ntype Flying implements Experience & Hobby {\n  employees: [Employee!]! @goField(forceResolver: true)\n  planeModels: [String!]!\n  yearsOfExperience: Float!\n}\n\nenum GameGenre {\n  ADVENTURE\n  BOARD\n  CARD\n  FPS\n  ROGUELITE\n  RPG\n  SIMULATION\n  STRATEGY\n}\n\ntype Gaming implements Experience & Hobby {\n  employees: [Employee!]! @goField(forceResolver: true)\n  genres: [GameGenre!]!\n  name: String!\n  yearsOfExperience: Float!\n}\n\ninterface Hobby {\n  employees: [Employee!]! @goField(forceResolver: true)\n}\n\ntype Other implements Hobby {\n  employees: [Employee!]! @goField(forceResolver: true)\n  name: String!\n}\n\ntype Programming implements Hobby {\n  employees: [Employee!]! @goField(forceResolver: true)\n  languages: [ProgrammingLanguage!]!\n}\n\nenum ProgrammingLanguage {\n  CSHARP\n  GO\n  RUST\n  TYPESCRIPT\n}\n\ntype SDK @key(fields: \"upc\") {\n  clientLanguages: [ProgrammingLanguage!]!\n  upc: ID!\n}\n\ntype Subscription {\n  countHob(intervalMilliseconds: Int!, max: Int!): Int!\n}\n\ntype Travelling implements Hobby {\n  countriesLived: [Country!]!\n  employees: [Employee!]! @goField(forceResolver: true)\n}\n\nscalar openfed__FieldSet",
                    "3137f2ca7ef4abe0c88c07c16256197ecb9f5673": "schema {\n  query: Queries\n  mutation: Mutation\n}\n\ndirective @authenticated on ENUM | FIELD_DEFINITION | INTERFACE | OBJECT | SCALAR\n\ndirective @composeDirective(name: String!) repeatable on SCHEMA\n\ndirective @extends on INTERFACE | OBJECT\n\ndirective @external on FIELD_DEFINITION | OBJECT\n\ndirective @inaccessible on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ndirective @interfaceObject on OBJECT\n\ndirective @key(fields: openfed__FieldSet!, resolvable: Boolean = true) repeatable on INTERFACE | OBJECT\n\ndirective @link(as: String, for: String, import: [String], url: String!) repeatable on SCHEMA\n\ndirective @override(from: String!) on FIELD_DEFINITION\n\ndirective @provides(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @requires(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @requiresScopes(scopes: [[openfed__Scope!]!]!) on ENUM | FIELD_DEFINITION | INTERFACE | OBJECT | SCALAR\n\ndirective @shareable on FIELD_DEFINITION | OBJECT\n\ndirective @tag(name: String!) repeatable on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ntype Consultancy @key(fields: \"upc\") {\n  name: ProductName!\n  upc: ID!\n}\n\ntype Cosmo @key(fields: \"upc\") {\n  name: ProductName!\n  repositoryURL: String!\n  upc: ID!\n}\n\ntype DirectiveFact implements TopSecretFact {\n  description: FactContent! @authenticated @requiresScopes(scopes: [[\"read:scalar\"], [\"read:all\"]])\n  factType: TopSecretFactType @authenticated\n  title: String! @authenticated\n}\n\ntype Documentation {\n  url(product: ProductName!): String!\n  urls(products: [ProductName!]!): [String!]!\n}\n\ntype Employee @key(fields: \"id\") {\n  id: Int!\n  notes: String\n  products: [ProductName!]!\n}\n\ntype EntityFact implements TopSecretFact {\n  description: FactContent! @authenticated @requiresScopes(scopes: [[\"read:entity\", \"read:scalar\"], [\"read:entity\", \"read:all\"]])\n  factType: TopSecretFactType @authenticated @requiresScopes(scopes: [[\"read:entity\"]])\n  title: String! @requiresScopes(scopes: [[\"read:entity\"]])\n}\n\nscalar FactContent\n\ntype MiscellaneousFact implements TopSecretFact {\n  description: FactContent! @authenticated @requiresScopes(scopes: [[\"read:miscellaneous\", \"read:scalar\"], [\"read:miscellaneous\", \"read:all\"]])\n  factType: TopSecretFactType @authenticated\n  title: String!\n}\n\ntype Mutation {\n  addFact(fact: TopSecretFactInput!): TopSecretFact! @requiresScopes(scopes: [[\"write:fact\"], [\"write:all\"]])\n}\n\nenum ProductName {\n  CONSULTANCY\n  COSMO\n  ENGINE\n  FINANCE\n  HUMAN_RESOURCES\n  MARKETING\n  SDK\n}\n\nunion Products = Consultancy | Cosmo | Documentation\n\ntype Queries {\n  factTypes: [TopSecretFactType!]\n  productTypes: [Products!]!\n  topSecretFederationFacts: [TopSecretFact!]!\n}\n\ninterface TopSecretFact {\n  description: FactContent! @authenticated @requiresScopes(scopes: [[\"read:scalar\"], [\"read:all\"]])\n  factType: TopSecretFactType @authenticated\n}\n\ninput TopSecretFactInput {\n  description: FactContent!\n  factType: TopSecretFactType!\n  title: String!\n}\n\nenum TopSecretFactType {\n  DIRECTIVE\n  ENTITY\n  MISCELLANEOUS\n}\n\nscalar openfed__FieldSet\n\nscalar openfed__Scope",
                    "5fdda1c3fd39161632a5e8d70ac8aa781de47039": "schema {\n  mutation: Mutation\n}\n\ndirective @extends on INTERFACE | OBJECT\n\ndirective @external on FIELD_DEFINITION | OBJECT\n\ndirective @key(fields: openfed__FieldSet!, resolvable: Boolean = true) repeatable on INTERFACE | OBJECT\n\ndirective @provides(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @requires(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @tag(name: String!) repeatable on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ntype Employee @key(fields: \"id\") {\n  id: Int!\n  isAvailable: Boolean!\n}\n\ntype Mutation {\n  updateAvailability(employeeID: Int!, isAvailable: Boolean!): Employee!\n}\n\nscalar openfed__FieldSet",
                    "02fab2519999b8e3d4671871fd2ab01b6bc321b7": "schema {\n  mutation: Mutation\n}\n\ndirective @extends on INTERFACE | OBJECT\n\ndirective @external on FIELD_DEFINITION | OBJECT\n\ndirective @key(fields: openfed__FieldSet!, resolvable: Boolean = true) repeatable on INTERFACE | OBJECT\n\ndirective @provides(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @requires(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @tag(name: String!) repeatable on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ntype Employee @key(fields: \"id\") {\n  currentMood: Mood!\n  id: Int!\n}\n\nenum Mood {\n  HAPPY\n  SAD\n}\n\ntype Mutation {\n  updateMood(employeeID: Int!, mood: Mood!): Employee!\n}\n\nscalar openfed__FieldSet"
                },
                "graphqlClientSchema": "directive @authenticated on ENUM | FIELD_DEFINITION | INTERFACE | OBJECT | SCALAR\n\ndirective @inaccessible on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ndirective @requiresScopes(scopes: [[openfed__Scope!]!]!) on ENUM | FIELD_DEFINITION | INTERFACE | OBJECT | SCALAR\n\ndirective @tag(name: String!) repeatable on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\nscalar openfed__Scope\n\ntype Query {\n  employee(id: Int!): Employee\n  employeeAsList(id: Int!): [Employee]\n  employees: [Employee]\n  products: [Products!]!\n  teammates(team: Department!): [Employee!]!\n  firstEmployee: Employee!\n  findEmployees(criteria: SearchInput): [Employee!]!\n  productTypes: [Products!]!\n  topSecretFederationFacts: [TopSecretFact!]!\n  factTypes: [TopSecretFactType!]\n}\n\ntype Mutation {\n  updateEmployeeTag(id: Int!, tag: String!): Employee\n  addFact(fact: TopSecretFactInput!): TopSecretFact!\n  updateAvailability(employeeID: Int!, isAvailable: Boolean!): Employee!\n  updateMood(employeeID: Int!, mood: Mood!): Employee!\n}\n\ntype Subscription {\n  \"\"\"`currentTime` will return a stream of `Time` objects.\"\"\"\n  currentTime: Time!\n  countEmp(max: Int!, intervalMilliseconds: Int!): Int!\n  countEmp2(max: Int!, intervalMilliseconds: Int!): Int!\n  countHob(max: Int!, intervalMilliseconds: Int!): Int!\n}\n\nenum Department {\n  ENGINEERING\n  MARKETING\n  OPERATIONS\n}\n\ninterface RoleType {\n  departments: [Department!]!\n  title: [String!]!\n  employees: [Employee!]!\n}\n\nenum EngineerType {\n  BACKEND\n  FRONTEND\n  FULLSTACK\n}\n\ninterface Identifiable {\n  id: Int!\n}\n\nenum OperationType {\n  FINANCE\n  HUMAN_RESOURCES\n}\n\ntype Details {\n  forename: String!\n  location: Country!\n  surname: String!\n  pastLocations: [City!]!\n  middlename: String @deprecated\n  hasChildren: Boolean!\n  maritalStatus: MaritalStatus\n  nationality: Nationality!\n  pets: [Pet]\n}\n\ntype City {\n  type: String!\n  name: String!\n  country: Country\n}\n\ntype Country {\n  key: CountryKey!\n}\n\ntype CountryKey {\n  name: String!\n}\n\ntype ErrorWrapper {\n  okField: String\n  errorField: String\n}\n\ntype Time {\n  unixTime: Int!\n  timeStamp: String!\n}\n\nunion Products = Consultancy | Cosmo | SDK | Documentation\n\ninterface IProduct {\n  upc: ID!\n  engineers: [Employee!]!\n}\n\ntype Consultancy {\n  upc: ID!\n  lead: Employee!\n  name: ProductName!\n}\n\nenum Class {\n  FISH\n  MAMMAL\n  REPTILE\n}\n\nenum Gender {\n  FEMALE\n  MALE\n  UNKNOWN\n}\n\ninterface Animal {\n  class: Class!\n  gender: Gender!\n}\n\nenum CatType {\n  HOME\n  STREET\n}\n\nenum DogBreed {\n  GOLDEN_RETRIEVER\n  POODLE\n  ROTTWEILER\n  YORKSHIRE_TERRIER\n}\n\nenum MaritalStatus {\n  ENGAGED\n  MARRIED\n}\n\nenum Nationality {\n  AMERICAN\n  DUTCH\n  ENGLISH\n  GERMAN\n  INDIAN\n  SPANISH\n  UKRAINIAN\n}\n\ninput SearchInput {\n  hasPets: Boolean\n  nationality: Nationality\n  nested: NestedSearchInput\n}\n\ninput NestedSearchInput {\n  maritalStatus: MaritalStatus\n  hasChildren: Boolean\n}\n\nenum ExerciseType {\n  CALISTHENICS\n  HIKING\n  SPORT\n  STRENGTH_TRAINING\n}\n\ninterface Experience {\n  yearsOfExperience: Float!\n}\n\nenum GameGenre {\n  ADVENTURE\n  BOARD\n  FPS\n  CARD\n  RPG\n  ROGUELITE\n  SIMULATION\n  STRATEGY\n}\n\nenum ProgrammingLanguage {\n  CSHARP\n  GO\n  RUST\n  TYPESCRIPT\n}\n\ninterface Hobby {\n  employees: [Employee!]!\n}\n\ninput TopSecretFactInput {\n  title: String!\n  description: FactContent!\n  factType: TopSecretFactType!\n}\n\nenum TopSecretFactType {\n  DIRECTIVE\n  ENTITY\n  MISCELLANEOUS\n}\n\ninterface TopSecretFact {\n  description: FactContent!\n  factType: TopSecretFactType\n}\n\nscalar FactContent\n\nenum ProductName {\n  CONSULTANCY\n  COSMO\n  ENGINE\n  FINANCE\n  HUMAN_RESOURCES\n  MARKETING\n  SDK\n}\n\ntype Documentation {\n  url(product: ProductName!): String!\n  urls(products: [ProductName!]!): [String!]!\n}\n\nenum Mood {\n  HAPPY\n  SAD\n}\n\ntype Engineer implements RoleType {\n  departments: [Department!]!\n  title: [String!]!\n  employees: [Employee!]!\n  engineerType: EngineerType!\n}\n\ntype Marketer implements RoleType {\n  departments: [Department!]!\n  title: [String!]!\n  employees: [Employee!]!\n}\n\ntype Operator implements RoleType {\n  departments: [Department!]!\n  title: [String!]!\n  employees: [Employee!]!\n  operatorType: [OperationType!]!\n}\n\ntype Employee implements Identifiable {\n  details: Details\n  id: Int!\n  tag: String!\n  role: RoleType!\n  notes: String\n  updatedAt: String!\n  startDate: String!\n  rootFieldThrowsError: String\n  rootFieldErrorWrapper: ErrorWrapper\n  hobbies: [Hobby!]\n  products: [ProductName!]!\n  isAvailable: Boolean!\n  currentMood: Mood!\n}\n\ntype Cosmo implements IProduct {\n  upc: ID!\n  engineers: [Employee!]!\n  lead: Employee!\n  name: ProductName!\n  repositoryURL: String!\n}\n\ntype SDK implements IProduct {\n  upc: ID!\n  engineers: [Employee!]!\n  owner: Employee!\n  clientLanguages: [ProgrammingLanguage!]!\n}\n\ninterface Pet implements Animal {\n  class: Class!\n  gender: Gender!\n  name: String!\n}\n\ntype Alligator implements Pet & Animal {\n  class: Class!\n  dangerous: String!\n  gender: Gender!\n  name: String!\n}\n\ntype Cat implements Pet & Animal {\n  class: Class!\n  gender: Gender!\n  name: String!\n  type: CatType!\n}\n\ntype Dog implements Pet & Animal {\n  breed: DogBreed!\n  class: Class!\n  gender: Gender!\n  name: String!\n}\n\ntype Mouse implements Pet & Animal {\n  class: Class!\n  gender: Gender!\n  name: String!\n}\n\ntype Pony implements Pet & Animal {\n  class: Class!\n  gender: Gender!\n  name: String!\n}\n\ntype Exercise implements Hobby {\n  employees: [Employee!]!\n  category: ExerciseType!\n}\n\ntype Flying implements Experience & Hobby {\n  employees: [Employee!]!\n  planeModels: [String!]!\n  yearsOfExperience: Float!\n}\n\ntype Gaming implements Experience & Hobby {\n  employees: [Employee!]!\n  genres: [GameGenre!]!\n  name: String!\n  yearsOfExperience: Float!\n}\n\ntype Other implements Hobby {\n  employees: [Employee!]!\n  name: String!\n}\n\ntype Programming implements Hobby {\n  employees: [Employee!]!\n  languages: [ProgrammingLanguage!]!\n}\n\ntype Travelling implements Hobby {\n  employees: [Employee!]!\n  countriesLived: [Country!]!\n}\n\ntype DirectiveFact implements TopSecretFact {\n  title: String!\n  description: FactContent!\n  factType: TopSecretFactType\n}\n\ntype EntityFact implements TopSecretFact {\n  title: String!\n  description: FactContent!\n  factType: TopSecretFactType\n}\n\ntype MiscellaneousFact implements TopSecretFact {\n  title: String!\n  description: FactContent!\n  factType: TopSecretFactType\n}"
            },
            "subgraphs": [
                {
                    "id": "0",
                    "name": "employees",
                    "routingUrl": "http://localhost:4001/graphql"
                },
                {
                    "id": "1",
                    "name": "family",
                    "routingUrl": "http://localhost:4002/graphql"
                },
                {
                    "id": "2",
                    "name": "hobbies",
                    "routingUrl": "http://localhost:4003/graphql"
                },
                {
                    "id": "3",
                    "name": "products",
                    "routingUrl": "http://localhost:4004/graphql"
                },
                {
                    "id": "4",
                    "name": "availability",
                    "routingUrl": "http://localhost:4007/graphql"
                },
                {
                    "id": "5",
                    "name": "mood",
                    "routingUrl": "http://localhost:4008/graphql"
                }
            ]
        }
    # -- The log level of the router. Default to info if not set.
    logLevel: 'info'
    # -- The URL of the Cosmo Controlplane. Should be internal to the cluster. Default to cloud if not set.
    controlplaneUrl: ''
    # -- The URL of the Cosmo GraphQL OTEL Collector. Should be internal to the cluster. Default to cloud if not set.
    otelCollectorUrl: ''
    # -- The URL of the Cosmo GraphQL Metrics Collector. Should be internal to the cluster. Default to cloud if not set.
    graphqlMetricsCollectorUrl: ''
    # -- Set to true to enable the development mode. This allows for Advanced Request Tracing (ART) in the GraphQL Playground
    devMode: false
    #-- The URL of the Cosmo CDN. Should be internal to the cluster. Default to cloud if not set.
    cdnUrl: ''
    # -- The path to the router execution config file. Before, you have to mount the file as a volume and set the path here.
    # A possible to solution could be to use an init container to download the file from a CDN. If set, polling of the config is disabled.
    routerConfigPath: '/app/execution-config.json'

    # Use this section to disable/enable and configure prometheus metrics.
    prometheus:
        # -- Enables prometheus metrics support. Default is true.
        enabled: true
        # -- The port where metrics are exposed. Default is port 8088.
        port: 8088
        # -- The HTTP path where metrics are exposed. Default is "/metrics".
        path: '/metrics'
