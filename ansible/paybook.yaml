- hosts: mgmt
  gather_facts: 'no'
  vars_files:
    - vars/vars.yaml
  environment:
    USE_GKE_GCLOUD_AUTH_PLUGIN: True
  tasks:
    - name: Install required packages
      apt:
        pkg:
          - apt-transport-https
          - ca-certificates
          - gnupg
          - curl
          - tinyproxy
        state: present
        update_cache: yes
        cache_valid_time: 86400
      become: true
      become_user: root
    - name: Download the Google Cloud SDK package repository signing key
      get_url:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        dest: /usr/share/keyrings/cloud.google.gpg
        force: yes
      become: true
      become_user: root
    - name: Add Google Cloud SDK package repository source
      apt_repository:
        filename: google-cloud-sdk
        repo: 'deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main'
        state: present
        update_cache: yes
      become: true
      become_user: root
    - name: Install gcloud kubectl and gke-auth-plugin
      apt:
        pkg:
          - google-cloud-cli
          - google-cloud-sdk-gke-gcloud-auth-plugin
          - kubectl
        state: present
      become: true
      become_user: root

    - name: Enable bash completion for kubectl
      shell:
        cmd: kubectl completion bash > /etc/bash_completion.d/kubectl
        creates: /etc/bash_completion.d/kubectl
      become: true
      become_user: root
    - name: Get cluster credentials
      shell: >
        gcloud container clusters get-credentials {{ cluster }} 
        --region {{ region }} 
        --project {{ project_id }} 
        --internal-ip
    #tinyproxy
    - block:
        - name: Check if logfile exists.
          ansible.builtin.stat:
            path: '/var/log/tinyproxy/tinyproxy.log'
          register: logfile_status

        - name: Check for Allow localhost rule
          lineinfile:
            path: /etc/tinyproxy/tinyproxy.conf
            line: Allow localhost
            regexp: '^Allow localhost$' # Only modify if line doesn't exist
            insertafter: EOF
            state: present
          register: allow_localhost

        - name: Create tinyproxy log file
          file:
            path: /var/log/tinyproxy/tinyproxy.log
            state: touch
            mode: '0744'
            owner: tinyproxy
            group: tinyproxy
          register: create_logfile
          when: not logfile_status.stat.exists

        - name: Restart tinyproxy
          service:
            name: tinyproxy
            state: restarted
          when: allow_localhost.changed or create_logfile.changed
      become: true
      become_user: root

    # - name: Render templates
    #   template:
    #     src: ../bundle/{{ item }}/kustomization.yaml.j2
    #     dest: ../bundle/{{ item }}/kustomization.yaml
    #   delegate_to: localhost
    #   with_items:
    #     - monitoring
    #     - locust
    # - name: Remove bundle locally
    #   local_action:
    #     module: file
    #     path: ../bundle.tar.gz
    #     state: absent
    # - name: Archive bundle locally
    #   archive:
    #     path: ../bundle
    #     dest: ../bundle.tar.gz
    #   delegate_to: localhost
    # - name: Unarchive bundle remotely
    #   unarchive:
    #     src: ../bundle.tar.gz
    #     dest: ~/
    # - name: Build locust image
    #   shell: >
    #     gcloud builds submit --tag {{ region }}-docker.pkg.dev/{{ project_id }}/registry/load-test:latest \
    #     --project {{ project_id }} .
    #   args:
    #     chdir: ~/bundle/locust/image
    # - name: Enable scraping of kubelet and cAdvisor metrics
    #   shell: >
    #     kubectl patch operatorconfig config
    #     -n gmp-public
    #     --type=merge
    #     -p '{"collection":{"kubeletScraping":{"interval": "30s"}}}'
    # - name: Deploy monitoring tooling
    #   shell: >
    #     kubectl apply -k .
    #   args:
    #     chdir: ~/bundle/monitoring
    # - name: Deploy app
    #   shell: >
    #     kubectl apply -k .
    #   args:
    #     chdir: ~/bundle/app
    # - name: Get forwarding rule name
    #   shell: >
    #     while true; do
    #         forwarding_rule_name=$(kubectl get ingress -n sample -o=jsonpath='{.items[0].metadata.annotations.ingress\.kubernetes\.io\/forwarding-rule}')
    #         if [ -n "$forwarding_rule_name" ]; then
    #           echo $forwarding_rule_name
    #           break
    #         fi
    #         sleep 10
    #     done
    #   register: forwarding_rule_name_output
    # - name: Set fact forwarding_url_name
    #   set_fact:
    #     forwarding_rule_name: '{{ forwarding_rule_name_output.stdout }}'
    # - name: Render template (HPA)
    #   template:
    #     src: ../bundle/app/hpa.yaml.j2
    #     dest: ~/bundle/app/hpa.yaml
    # - name: Apply HPA manifest
    #   shell: >
    #     kubectl apply -f hpa.yaml
    #   args:
    #     chdir: ~/bundle/app
    # - name: Deploy locust
    #   shell: >
    #     kubectl apply -k .
    #   args:
    #     chdir: ~/bundle/locust
